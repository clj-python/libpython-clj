(ns build
  (:require [badigeon.clean :as clean]
            [badigeon.classpath :as classpath]
            [badigeon.javac :as javac]
            [badigeon.jar :as jar]
            [badigeon.install :as install]
            [badigeon.sign :as sign]
            [badigeon.deploy :as deploy]
            [badigeon.pom :as pom]
            [clojure.tools.deps.alpha.reader :as deps-reader]
            [clojure.data.xml :as xml]
            [clojure.string :as str]
            [clojure.data.xml.tree :as tree]
            [clojure.data.xml.event :as event]
            [clojure.java.io :as io])
  (:import (java.util.jar JarEntry JarOutputStream)
           (java.nio.file Path Paths)
           [java.io File Reader ByteArrayOutputStream]
           [clojure.data.xml.node Element]
           (java.net URI)))


(def deps-content (deps-reader/slurp-deps "deps.edn"))
(def java-src-folder (-> deps-content :build :java-source-paths))
(def javac-options (-> deps-content :build :javac-options))
(def group-id (-> deps-content :build :group-id))
(def artifact-id (-> deps-content :build :artifact-id))
(def group-artefact-id (symbol (str group-id "/" artifact-id)))
(def artifact-version (-> deps-content :build :artifact-version))
(def artifact-description (-> deps-content :build :description))
(def artifact-url (-> deps-content :build :url))
(def artifact-scm (-> deps-content :build :scm))
(def artifact-license (-> deps-content :build :license))
(def jar-name (str "target/" artifact-id "-" artifact-version ".jar"))


(defn clean
  []
  (clean/clean "target"
    {;; By default, clean does not allow deleting folders outside the target directory,
     ;; unless :allow-outside-target? is true
     :allow-outside-target? false}))

(defn make-classpath
  []
  ;; Builds a classpath by using the provided deps spec or, by default, the deps.edn file of the current project.
  ;; Returns the built classpath as a string.

  (classpath/make-classpath))

(defn compile-java
  ([emit-path]
   ;; Compile java sources under the java-src-folder directory
   (when java-src-folder
     (javac/javac java-src-folder {;; Emit class files to the target/classes directory
                                   :compile-path  emit-path
                                   ;; Additional options used by the javac command
                                   :javac-options javac-options})))
  ([]
   (compile-java "target/classes")))


(defn- parse-xml
  [^Reader rdr]
  (let [roots (tree/seq-tree
                event/event-element event/event-exit? event/event-node
                (xml/event-seq rdr {:include-node? #{:element :characters :comment}}))]
    (first (filter #(instance? Element %) (first roots)))))


(xml/alias-uri 'ppom "http://maven.apache.org/POM/4.0.0")

(defn- add-extra-stuff->pom
  []
  (let [pom-file (io/file "pom.xml")
        pom      (with-open [rdr (io/reader pom-file)]
                   (-> rdr
                     parse-xml))
        pom      (if artifact-url
                   (#'badigeon.pom/xml-update pom [::ppom/url] (xml/sexp-as-element [::ppom/url artifact-url]))
                   pom)
        pom      (if artifact-description
                   (#'badigeon.pom/xml-update pom [::ppom/description] (xml/sexp-as-element [::ppom/description artifact-description]))
                   pom)
        pom      (if artifact-scm
                   (#'badigeon.pom/xml-update pom [::ppom/scm] (xml/sexp-as-element [::ppom/scm [::ppom/url (:url artifact-scm)]]))
                   pom)
        pom      (if artifact-license
                   (#'badigeon.pom/xml-update pom [::ppom/license] (xml/sexp-as-element [::ppom/licenses
                                                                                         [::ppom/license
                                                                                          [::ppom/url (or (:url artifact-license) "")]
                                                                                          [::ppom/name (or (:name artifact-license)) ""]]]))

                   pom)]


    (spit pom-file (str/replace (xml/indent-str pom) #"\n\s+\n" "\n"))
    (spit pom-file "<!-- This file was autogenerated by build script.
    Please do not edit it directly; instead edit deps.edn and regenerate it.
    It should not be considered canonical data. For more information see dev/src/build.clj -->" :append true)))

(defn make-pom
  []
  (when (.exists (io/file "pom.xml"))
    (io/delete-file "pom.xml"))
  (let [lib          (symbol group-artefact-id)
        maven-coords {:mvn/version artifact-version}]
    (pom/sync-pom lib maven-coords (-> (deps-reader/slurp-deps "deps.edn")))
    (add-extra-stuff->pom)))

(defn jar
  []
  (when (.exists (io/file "pom.xml"))
    (io/delete-file "pom.xml"))
  ;; Package the project into a jar file
  (jar/jar group-artefact-id {:mvn/version artifact-version}
    {;; The jar file produced.
     :out-path                jar-name
     ;;;; Adds a \"Main\" entry to the jar manifest with the value
     ;;:main                    main-ns
     ;; Additional key/value pairs to add to the jar manifest. If a value is a collection, a manifest section is built for it.
     ;;:manifest                {"Project-awesome-level" "super-great"
     ;;                          :my-section-1           [["MyKey1" "MyValue1"] ["MyKey2" "MyValue2"]]
     ;;                          :my-section-2           {"MyKey3" "MyValue3" "MyKey4" "MyValue4"}}

     ;; By default Badigeon add entries for all files in the directory listed in the
     ;; :paths section of the deps.edn file. This can be overridden here.
     ;;:paths                   ["src" "target/classes" "java-src"]

     ;; The dependencies to be added to the \"dependencies\" section of the pom.xml file.
     ;; When not specified, defaults to the :deps entry of the deps.edn file, without
     ;; merging the user-level and system-level deps.edn files
     ;;:deps                    '{org.clojure/clojure {:mvn/version "1.10.1"}}
     ;; The repositories to be added to the \"repositories\" section of the pom.xml file.
     ;; When not specified, default to nil - even if the deps.edn files contains
     ;; a :mvn/repos entry.
     :mvn/repos               '{"clojars" {:url "https://repo.clojars.org/"}}
     ;; A predicate used to excludes files from beeing added to the jar.
     ;; The predicate is a function of two parameters: The path of the directory
     ;; beeing visited (among the :paths of the project) and the path of the file
     ;; beeing visited under this directory.
     :exclusion-predicate     badigeon.jar/default-exclusion-predicate
     ;; A function to add files to the jar that would otherwise not have been added to it.
     ;; The function must take two parameters: the path of the root directory of the
     ;; project and the file being visited under this directory. When the function
     ;; returns a falsy value, the file is not added to the jar. Otherwise the function
     ;; must return a string which represents the path within the jar where the file
     ;; is copied.
     ;; :inclusion-path          (partial badigeon.jar/default-inclusion-path "badigeon" "badigeon")
     ;; By default git and local dependencies are not allowed. Set allow-all-dependencies? to true to allow them
     :allow-all-dependencies? true})
  (add-extra-stuff->pom)
  (println "Successfully created jar file: " jar-name))



(defn install
  []
  ;; Install the created jar file into the local maven repository.
  (let [local-repo (str (System/getProperty "user.home") "/.m2/repository")]
    (install/install group-artefact-id {:mvn/version artifact-version}
      ;; The jar file to be installed
      jar-name
      ;; The pom.xml file to be installed. This file is generated when creating the jar with the badigeon.jar/jar function.
      "pom.xml"
      {;; The local repository where the jar should be installed.
       :local-repo local-repo})
    (println "Successfully installed to local repo: " local-repo)))

(defn deploy
  []
  ;; Deploy the  created jar file to a remote repository.
  (let [;; Artifacts are maps with a required :file-path key and an optional :extension key
        artifacts [{:file-path jar-name :extension "jar"}
                   {:file-path "pom.xml" :extension "pom"}]
        ;; Artifacts must be signed when deploying non-snapshot versions of artifacts.
        artifacts (badigeon.sign/sign artifacts {;; The gpg command can be customized
                                                 :command "gpg"})]
    ;; The gpg key used for signing. Defaults to the first private key found in your keyring.
    ;;:gpg-key "root@eruditorum.org"


    ;;  default to reading the credentials from ~/.m2/settings.xml. uncomment to prompt user credentials.
    ;;;; Prompt for a username
    ;;username (badigeon.prompt/prompt "Username (clojars): ")
    ;;;; Prompt for a password using the process standard input and without echoing.
    ;;password (badigeon.prompt/prompt-password "Password (clojars): ")

    (badigeon.deploy/deploy
      group-artefact-id artifact-version
      artifacts
      {;; :id is used to match the repository in the ~/.m2/settings.xml for credentials when no credentials are explicitly provided.
       :id  "clojars"
       ;; The URL of the repository to deploy to.
       :url "https://repo.clojars.org/"}
      {
       ;; Take creds from ~/.m2/settings.xml

       ;; The credentials used when authenticating to the remote repository.
       ;; When none is provided, default to reading the credentials from ~/.m2/settings.xml
       ;;:credentials {:username username :password password
       ;;              ;;:private-key "/path/to/private-key" :passphrase "passphrase"
       ;;              }
       ;; When allow-unsigned? is false, artifacts must be signed when deploying non-snapshot versions of artifacts. Default to false.
       :allow-unsigned? false})
    (println "Success!")))

(comment
  (def cp (make-classpath))
  (clean)
  (compile-java)
  (extract-classes-from-deps)
  (make-pom)
  (add-extra-stuff->pom)
  (jar)
  (install))

